@page "/Tecnico/create"
@inject TecnicoServices tecnicoServices
@inject TiposTecnicosServices tiposTecnicosServices
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<PageTitle>Registro de T&eacute;cnicos</PageTitle>

<EditForm Model="tecnico" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header bg-primary text-white text-center py-2 rounded">
            <h3> <i class="fas fa-clipboard-list"></i> Registro de T&eacute;cnicos</h3>
        </div>

        <div class="card-body">
            @*Nombres*@
            <div class="mb-3">
                <label for="Nombres" class="form-label">Nombres:</label>
                <InputText @bind-Value="tecnico.Nombres" class="form-control" />
                <ValidationMessage For="@(() => tecnico.Nombres)" />
                @if (Existe)
                {
                    <p class="text-danger">Ya existe un técnico con ese nombre.</p>
                }
            </div>

            @*TipoTecnico*@
            <div class="mb-3">
                <label for="TipoTecnicoId">Tipo de Técnico:</label>
                <div class="row">
                    <div class="col-4 ms-3">
                        <InputSelect @bind-Value="tecnico.TipoTecnicoId" class="form-control">
                            <option value="">Seleccione un tipo de técnico</option>
                            @foreach (var tiposTecnicos in ListaTiposTecnicos)
                            {
                                <option value="@tiposTecnicos.TipoTecnicoId">@tiposTecnicos.Descripcion</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => tecnico.TipoTecnicoId)" />
                    </div>
                </div>
            </div>
        </div>

        @*SueldoHora*@
        <div class="mb-3">
            <label for="SueldoHora" class="form-label"><strong>Sueldo por Hora</strong></label>
            <InputNumber @bind-Value="tecnico.SueldoHora" class="form-control" />
            <ValidationMessage For="@(() => tecnico.SueldoHora)" />
        </div>
    </div>

    <div class="card-footer bg-light d-flex justify-content-center mt-3">
        <div class="btn-group">
            <button type="submit" class="btn btn-success ml-2"><span class="bi bi-check-circle-fill"></span> Guardar </button>
            <button type="button" class="btn btn-danger" @onclick="Eliminar"><span class="bi bi-trash-fill"></span> Eliminar </button>
            <button type="button" class="btn btn-primary" @onclick="Volver"><span class="bi bi-arrow-left-square-fill"></span> Volver </button>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int TecnicoId { get; set; }
    public Tecnicos tecnico { get; set; } = new Tecnicos();
    public List<TiposTecnicos> ListaTiposTecnicos { get; set; } = new List<TiposTecnicos>();
    private bool Existe = false;
    private string Mensaje { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        ListaTiposTecnicos = await tiposTecnicosServices.Listar(t => true);
        await Nuevo();
    }

    public async Task Nuevo()
    {
        tecnico = new Tecnicos();
        Existe = false;
    }

    public async Task Buscar()
    {
        Existe = false;
        var tecnicoEncontrado = await tecnicoServices.Buscar(tecnico.TecnicoId);

        if (tecnicoEncontrado != null)
        {
            tecnico = tecnicoEncontrado;
            Existe = true; // Marcamos como existente si se encuentra
        }
        else
        {
            await Nuevo();
        }
    }

    private async Task Guardar()
    {
        try
        {
            if (await Validar())
            {
                Mensaje = "Ya existe un técnico con ese nombre.";
                return;
            }

            var crear = await tecnicoServices.Guardar(tecnico);

            if (crear)
            {
                Mensaje = "Se ha creado correctamente.";
                await Task.Delay(2000);
                Volver();
            }
            else
            {
                Mensaje = "No se pudo crear el técnico.";
            }
        }
        catch (Exception ex)
        {
            Mensaje = $"Error al guardar: {ex.Message}";
        }
    }

    public async Task Eliminar()
    {
        if (tecnico.TecnicoId > 0)
        {
            var eliminado = await tecnicoServices.Eliminar(tecnico);
            if (eliminado)
            {
                await Nuevo();
                navigationManager.NavigateTo("/Tecnico/index");
            }
        }
    }

    private void Volver()
    {
        navigationManager.NavigateTo("/Tecnico/index");
    }

    private async Task<bool> Validar()
    {
        return await tecnicoServices.ExisteTecnico(tecnico.TecnicoId, tecnico.Nombres);
    }
}
