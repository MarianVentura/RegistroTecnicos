@page "/Tecnico/Create"
@inject TecnicoServices tecnicoServices
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<EditForm Model="tecnico" OnValidSubmit="Guardar">
    <DataAnnotationsValidator/>
    <div class="card shadow-lg border-0 rounded" style="background-color: transparent;">
        <div class="card-header bg-primary text-white" style="text-align: center">
            <h3> <i class="fas fa-clipboard-list"></i>Registro de Técnicos</h3>
        </div>

        <div class="card-body">
            @*TecnicoId*@
            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="TecnicoId" class="form-label">T&eacute;cnicoId:</label>
                    <div class="input-group">
                        <div style="width: 40%; height: 1em;">
                            <InputNumber @bind-Value="tecnico.TecnicoId" class="form-control" style="font-size: 0.8em;" aria-describedby="BotonBuscar" />
                        </div>
                    </div>
                </div>
            </div>

            @*Nombre*@
            <div class="mb-3">
                <label for="Nombres" class="form-label">Nombre:</label>
                <InputText @bind-Value="tecnico.Nombre" class="form-control" />
                ValidationMessage For="@(() => tecnicoServices.Nombre)" />
            </div>

            @*SueldoHora*@
            <div class="mb-3">
                <label> SueldoHora </label>
                <InputNumber @bind-Value="tecnico.Sueldohora" class="form-control" />
                <ValidationMessage For="@(() => tecnico.Sueldohora)" />
            </div>
        </div>
    </div>

</EditForm>

@code{
    [Parameter]
    public int TenicoId { get; set; }

    public Tecnicos tecnicos { get; set; } = new Tecnicos();
    private bool Existe = false;

    public async Task Nuevo()
    {
        tecnicos = new Tecnicos();
        Existe = false;
    }

    public async Task Buscar()
    {
        Existe = false;
        var tecnicoEncontrado = await tecnicoServices.Buscar(tecnico.TecnicoId);

        if (tecnicoEncontrado != null)
        {
            tecnicoEncontrado = tecnicoEncontrado;
        }
        else
        {
            Nuevo();
        }
    }

    public async Task<bool> Validar()
    {
        Existe = await tecnicoServices.Existe(tecnicos.TecnicoId);
        return !Existe;
    }

    public async Task Guardar()
    {
        if (!await Validar())
        {
            return;
        }
        var guardo = await tecnicoServices.Guardar(tecnico);
        if (guardo)
        {
            Nuevo();
        }
    }
    public async Task Eliminar()
    {
        var eliminado = await tecnicoServices.Eliminar(tecnicos.TecnicoId);
        Nuevo();
    }
}

    

