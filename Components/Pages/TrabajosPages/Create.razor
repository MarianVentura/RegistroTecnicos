@page "/Trabajos/Create"
@inject TrabajosServices trabajosServices
@inject ClientesServices clientesServices
@inject TecnicoServices tecnicoServices
@inject PrioridadesServices prioridadesServices
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<PageTitle>Crear Trabajo</PageTitle>

<EditForm Model="trabajo" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="card">
        <div class="card-header bg-primary text-white text-center py-2 rounded">
            <h3><i class="fas fa-tasks"></i> <strong>Crear Trabajo</strong></h3>
        </div>

        <div class="card-body">
            @* Fecha *@
            <div class="mb-3">
                <label for="Fecha" class="form-label">Fecha</label>
                <InputDate @bind-Value="trabajo.Fecha" class="form-control" />
                <ValidationMessage For="@(() => trabajo.Fecha)" />
            </div>

            @* Cliente *@
            <div class="mb-3">
                <label for="ClienteId" class="form-label">Cliente</label>
                <InputSelect @bind-Value="trabajo.ClienteId" class="form-control">
                    <option value="">Seleccione un cliente</option>
                    @foreach (var cliente in listaClientes)
                    {
                        <option value="@cliente.ClienteId">@cliente.Nombres</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => trabajo.ClienteId)" />
            </div>

            @* Técnico *@
            <div class="mb-3">
                <label for="TecnicoId" class="form-label">Técnico</label>
                <InputSelect @bind-Value="trabajo.TecnicoId" class="form-control">
                    <option value="">Seleccione un técnico</option>
                    @foreach (var tecnico in listaTecnicos)
                    {
                        <option value="@tecnico.TecnicoId">@tecnico.Nombres</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => trabajo.TecnicoId)" />
            </div>

            @* Descripción *@
            <div class="mb-3">
                <label for="Descripcion" class="form-label">Descripción</label>
                <InputTextArea @bind-Value="trabajo.Descripcion" class="form-control" />
                <ValidationMessage For="@(() => trabajo.Descripcion)" />
            </div>

            @*Prioridad*@
            <div class="mb-3">
                <label for="PrioridadId" class="form-label">Prioridad</label>
                <InputSelect @bind-Value="trabajo.PrioridadId" class="form-select">
                    <option value="">Seleccione una prioridad</option>
                    @foreach (var item in listaPrioridades)
                    {
                        <option value="@item.PrioridadId">@item.Descripcion</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => trabajo.PrioridadId)" />
            </div>

            @* Monto *@
            <div class="mb-3">
                <label for="Monto" class="form-label">Monto</label>
                <InputNumber @bind-Value="trabajo.Monto" class="form-control" />
                <ValidationMessage For="@(() => trabajo.Monto)" />
            </div>

            <div class="card-footer bg-light d-flex justify-content-around mt-3">
                <button type="submit" class="btn btn-success"><span class="bi bi-check-circle-fill"></span> Guardar</button>
                <button type="button" class="btn btn-primary" @onclick="Volver"><span class="bi bi-arrow-left-square-fill"></span> Volver</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    public Trabajos trabajo { get; set; } = new Trabajos();
    public List<Clientes> listaClientes { get; set; } = new List<Clientes>();
    public List<Tecnicos> listaTecnicos { get; set; } = new List<Tecnicos>();
    public List<Prioridades> listaPrioridades { get; set; } = new List<Prioridades>(); 

    protected override async Task OnInitializedAsync()
    {
        listaClientes = await clientesServices.Listar(c => c.ClienteId > 0);
        listaTecnicos = await tecnicoServices.Listar(t => t.TecnicoId > 0);
        listaPrioridades = await prioridadesServices.Listar(p => p.PrioridadId > 0); 
    }

    private async Task Guardar()
    {
        var guardo = await trabajosServices.Guardar(trabajo);
        if (guardo)
        {
            navigationManager.NavigateTo("/Trabajos/Index");
        }
    }

    private void Volver()
    {
        navigationManager.NavigateTo("/Trabajos/Index");
    }
}
