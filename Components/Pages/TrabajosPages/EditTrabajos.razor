@page "/Trabajos/Edit"
@page "/Trabajos/Edit/{TrabajoId:int}"
@inject TrabajosServices trabajosServices
@inject ClientesServices clientesServices
@inject TecnicoServices tecnicoServices
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<EditForm Model="trabajo" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header bg-primary text-white text-center py-2 rounded">
            <h3> <i class="fas fa-tools"></i> Modificar Trabajo</h3>
        </div>

        <div class="card-body">
            @*TrabajoId*@
            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="TrabajoId" class="form-label">ID de Trabajo:</label>
                    <div class="input-group">
                        <div style="width: 40%; height: 1em;">
                            <InputNumber @bind-Value="trabajo.TrabajoId" class="form-control" readonly />
                        </div>
                        <ValidationMessage For="@(() => trabajo.TrabajoId)" />
                    </div>
                </div>
            </div>

            @*Fecha*@
            <div class="mb-3">
                <label for="Fecha" class="form-label">Fecha:</label>
                <InputDate @bind-Value="trabajo.Fecha" class="form-control" />
                <ValidationMessage For="@(() => trabajo.Fecha)" />
            </div>

            @*Cliente*@
            <div class="mb-3">
                <label for="ClienteId" class="form-label">Cliente:</label>
                <InputSelect @bind-Value="trabajo.ClienteId" class="form-control">
                    <option value="">Seleccione un Cliente</option>
                    @if (clientes != null)
                    {
                        @foreach (var cliente in clientes)
                        {
                            <option value="@cliente.ClienteId">@cliente.Nombres</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => trabajo.ClienteId)" />
            </div>

            @*Técnico*@
            <div class="mb-3">
                <label for="TecnicoId" class="form-label">Técnico:</label>
                <InputSelect @bind-Value="trabajo.TecnicoId" class="form-control">
                    <option value="">Seleccione un Técnico</option>
                    @if (tecnicos != null)
                    {
                        @foreach (var tecnico in tecnicos)
                        {
                            <option value="@tecnico.TecnicoId">@tecnico.Nombres</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => trabajo.TecnicoId)" />
            </div>

            @*Descripción*@
            <div class="mb-3">
                <label for="Descripcion" class="form-label">Descripción:</label>
                <InputText @bind-Value="trabajo.Descripcion" class="form-control" />
                <ValidationMessage For="@(() => trabajo.Descripcion)" />
            </div>

            @*Monto*@
            <div class="mb-3">
                <label for="Monto" class="form-label">Monto:</label>
                <InputNumber @bind-Value="trabajo.Monto" class="form-control" />
                <ValidationMessage For="@(() => trabajo.Monto)" />
            </div>
        </div>

        <div class="card-footer bg-light d-flex justify-content-center mt-3">
            <div class="btn-group">
                <button type="submit" class="btn btn-success ml-2"><span class="bi bi-check-circle-fill"></span> Guardar </button>
                <button type="button" class="btn btn-danger" @onclick="Eliminar"><span class="bi bi-trash-fill"></span> Eliminar </button>
                <button type="button" class="btn btn-primary" @onclick="Volver"><span class="bi bi-arrow-left-square-fill"></span> Volver </button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int TrabajoId { get; set; }
    public Trabajos trabajo { get; set; } = new Trabajos();
    public List<Clientes> clientes { get; set; } = new List<Clientes>();
    public List<Tecnicos> tecnicos { get; set; } = new List<Tecnicos>();

    protected override async Task OnInitializedAsync()
    {
        clientes = await clientesServices.Listar(e => e.ClienteId > 0);
        tecnicos = await tecnicoServices.Listar(t => t.TecnicoId > 0);

        if (TrabajoId != 0)
        {
            await Buscar();
        }
    }

    public async Task Buscar()
    {
        var trabajoEncontrado = await trabajosServices.Buscar(TrabajoId);
        if (trabajoEncontrado != null)
        {
            trabajo = trabajoEncontrado;
        }
        else
        {
            trabajo = new Trabajos();
        }
    }

    public async Task Guardar()
    {
        var guardo = await trabajosServices.Guardar(trabajo);
        if (guardo)
        {
            navigationManager.NavigateTo("/Trabajos/Index");
        }
    }

    public async Task Eliminar()
    {
        var eliminado = await trabajosServices.Eliminar(TrabajoId);
        navigationManager.NavigateTo("/Trabajos/Index");
    }

    private void Volver()
    {
        navigationManager.NavigateTo("/Trabajos/Index");
    }
}
