@page "/Trabajos/Details"
@page "/Trabajos/Details/{TrabajoId:int}"
@inject TrabajosServices trabajosServices
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<PageTitle>Detalles del Trabajo</PageTitle>

@if (trabajo != null)
{
    <div class="container">
        <div class="card shadow-header">
            <div class="card-header bg-primary text-white text-center py-2 rounded">
                <h3 class="text-center"><strong>Detalles del Trabajo</strong></h3>
            </div>
            <div class="container">
                <div class="row">
                    <div class="col-md-6">
                        <div class="card-body">
                            <ul class="list-unstyled">
                                <li><strong>TrabajoId:</strong> @trabajo.TrabajoId</li>
                                <li><strong>Fecha:</strong> @trabajo.Fecha.ToString("dd/MM/yyyy")</li>
                                <li><strong>Cliente:</strong> @trabajo.Cliente.Nombres</li>
                                <li><strong>Técnico:</strong> @trabajo.Tecnico.Nombres</li>
                                <li><strong>Descripción:</strong> @trabajo.Descripcion</li>
                                <li><strong>Monto:</strong> @trabajo.Monto.ToString("C")</li>
                            </ul>
                        </div>
                    </div>
                </div>

                @* Detalles de artículos utilizados *@
                <div class="row">
                    <div class="col-md-12">
                        <h5>Detalles de Artículos Utilizados</h5>
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Artículo</th>
                                    <th>Cantidad</th>
                                    <th>Precio</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (trabajo.TrabajosDetalle != null && trabajo.TrabajosDetalle.Count > 0)
                                {
                                    foreach (var detalle in trabajo.TrabajosDetalle)
                                    {
                                        <tr>
                                            <td>@detalle.Articulos.Descripcion</td>
                                            <td>@detalle.Cantidad</td>
                                            <td>@detalle.Precio</td>
                                        </tr>
                                    }
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="3" class="text-center">No se han utilizado artículos en este trabajo.</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <div class="card-footer d-flex justify-content-between">
                <button class="btn btn-success" @onclick="EnviarWhatsApp">
                    <i class="bi bi-whatsapp"></i> Enviar WhatsApp
                </button>

                @* Mensaje de notificación *@
                @if (!string.IsNullOrEmpty(notificacion))
                {
                    <div class="alert alert-info mt-3">@notificacion</div>
                }

                <button type="button" class="btn btn-primary" @onclick="Volver">
                    <i class="bi bi-arrow-left-square-fill"></i> Volver
                </button>
            </div>
        </div>
    </div>
}
else
{
    <p>Trabajo no encontrado.</p>
}

@code {
    [Parameter]
    public int TrabajoId { get; set; }
    public Trabajos? trabajo { get; set; } = new Trabajos();
    private string notificacion;

    protected override async Task OnInitializedAsync()
    {
        trabajo = await trabajosServices.Buscar(TrabajoId);
        trabajo.TrabajosDetalle = await trabajosServices.ObtenerDetallesPorTrabajoId(TrabajoId);

    }

    public void Volver()
    {
        navigationManager.NavigateTo("/Trabajos/Index");
    }

    public void EnviarWhatsApp()
    {
        if (trabajo?.Cliente != null && !string.IsNullOrEmpty(trabajo.Cliente.WhatsApp))
        {
            var mensaje = $"Hola {trabajo.Cliente.Nombres}, su trabajo '{trabajo.Descripcion}' ha sido completado. El total es {trabajo.Monto:C}. ¡Gracias por su preferencia!";

            var urlWhatsApp = $"https://wa.me/{trabajo.Cliente.WhatsApp.Replace(" ", "")}?text={Uri.EscapeDataString(mensaje)}";

            navigationManager.NavigateTo(urlWhatsApp, forceLoad: true);
            notificacion = "Mensaje enviado correctamente.";
        }
        else
        {
            notificacion = "Error: No se pudo enviar el mensaje. El cliente no tiene un número de WhatsApp registrado.";
        }
    }
}
